brew install postgresql
==> Installing postgresql dependency: readline
==> Downloading http://ftpmirror.gnu.org/readline/readline-6.2.tar.gz
######################################################################## 100.0%
==> Patching
patching file callback.c
patching file input.c
patching file patchlevel
patching file support/shobj-conf
patching file vi_mode.c
==> ./configure --prefix=/usr/local/Cellar/readline/6.2.4 --mandir=/usr/local/Ce
==> make install
==> Caveats
This formula is keg-only: so it was not symlinked into /usr/local.

OS X provides the BSD libedit library, which shadows libreadline.
In order to prevent conflicts when programs look for libreadline we are
defaulting this GNU Readline installation to keg-only.

Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you'll need to add to your
build variables:

    LDFLAGS:  -L/usr/local/opt/readline/lib
    CPPFLAGS: -I/usr/local/opt/readline/include

==> Summary
🍺  /usr/local/Cellar/readline/6.2.4: 31 files, 1.6M, built in 12 seconds
==> Installing postgresql dependency: ossp-uuid
==> Downloading ftp://ftp.ossp.org/pkg/lib/uuid/uuid-1.6.2.tar.gz

curl: (7) couldn't connect to host
Trying a mirror...
==> Downloading http://gnome-build-stage-1.googlecode.com/files/uuid-1.6.2.tar.g
######################################################################## 100.0%
==> ./configure --prefix=/usr/local/Cellar/ossp-uuid/1.6.2 --without-perl --with
==> make
==> make install
==> Caveats
This formula is keg-only: so it was not symlinked into /usr/local.

OS X provides a uuid.h which conflicts with ossp-uuid's header.

Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you'll need to add to your
build variables:

    LDFLAGS:  -L/usr/local/opt/ossp-uuid/lib
    CPPFLAGS: -I/usr/local/opt/ossp-uuid/include

==> Summary
🍺  /usr/local/Cellar/ossp-uuid/1.6.2: 15 files, 232K, built in 12 seconds
==> Installing postgresql
==> Downloading http://ftp.postgresql.org/pub/source/v9.2.4/postgresql-9.2.4.tar
######################################################################## 100.0%
==> Patching
patching file src/pl/plpython/Makefile
patching file contrib/uuid-ossp/uuid-ossp.c
==> ./configure --prefix=/usr/local/Cellar/postgresql/9.2.4 --datadir=/usr/local
==> make install-world
==> Caveats
# Build Notes

If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/mxcl/homebrew/issues/issue/2510

To build plpython against a specific Python, set PYTHON prior to brewing:
  PYTHON=/usr/local/bin/python  brew install postgresql
See:
  http://www.postgresql.org/docs/9.2/static/install-procedure.html

# Create/Upgrade a Database

If this is your first install, create a database with:
  initdb /usr/local/var/postgres -E utf8

To migrate existing data from a previous major version (pre-9.2) of PostgreSQL, see:
  http://www.postgresql.org/docs/9.2/static/upgrading.html

# Loading Extensions

By default, Homebrew builds all available Contrib extensions.  To see a list of all
available extensions, from the psql command line, run:
  SELECT * FROM pg_available_extensions;

To load any of the extension names, navigate to the desired database and run:
  CREATE EXTENSION [extension name];

For instance, to load the tablefunc extension in the current database, run:
  CREATE EXTENSION tablefunc;

For more information on the CREATE EXTENSION command, see:
  http://www.postgresql.org/docs/9.2/static/sql-createextension.html
For more information on extensions, see:
  http://www.postgresql.org/docs/9.2/static/contrib.html

# Other

Some machines may require provisioning of shared memory:
  http://www.postgresql.org/docs/9.2/static/kernel-resources.html#SYSVIPC
When installing the postgres gem, including ARCHFLAGS is recommended:
  ARCHFLAGS="-arch x86_64" gem install pg

To install gems without sudo, see the Homebrew wiki.

To have launchd start postgresql at login:
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
Then to load postgresql now:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
Or, if you don't want/need launchctl, you can just run:
    pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
==> Summary
🍺  /usr/local/Cellar/postgresql/9.2.4: 2831 files, 39M, built in 87 seconds















initdb /usr/local/var/postgres
The files belonging to this database system will be owned by user "vishalsaidaswani".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.UTF-8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

creating directory /usr/local/var/postgres ... ok
creating subdirectories ... ok
selecting default max_connections ... 20
selecting default shared_buffers ... 1600kB
creating configuration files ... ok
creating template1 database in /usr/local/var/postgres/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    postgres -D /usr/local/var/postgres
or
    pg_ctl -D /usr/local/var/postgres -l logfile start






















install PostgreSQL 9 in Mac OSX via Homebrew
 
 
Mac OS X Snow Leopard
System Version: Mac OS X 10.6.5
Kernel Version: Darwin 10.5.0
 
 
Install notes for PostgreSQL 9.0.1 install using Homebrew:
  sh-3.2# brew install postgresql
  sh-3.2# brew install postgresql
  Warning: It appears you have MacPorts or Fink installed.
  Software installed with MacPorts and Fink are known to cause problems.
  If you experience issues try uninstalling these tools.
  ==> Downloading ftp://ftp.ossp.org/pkg/lib/uuid/uuid-1.6.2.tar.gz
  ######################################################################## 100.0%
  ==> ./configure --disable-debug --without-perl --without-php --without-pgsql --p
  ==> make
  ==> make install
  /usr/local/Cellar/ossp-uuid/1.6.2: 11 files, 364K, built in 17 seconds
  ==> Downloading http://ftp9.us.postgresql.org/pub/mirrors/postgresql/source/v9.0
  ######################################################################## 100.0%
  ==> ./configure --disable-debug --prefix=/usr/local/Cellar/postgresql/9.0.1 --enable-thread
  ==> make install
  ==> cd contrib/adminpack; make install
  ==> cd contrib/dblink; make install
  ==> cd contrib/fuzzystrmatch; make install
  ==> cd contrib/lo; make install
  ==> cd contrib/uuid-ossp; make install
  ==> cd contrib/pg_buffercache; make install
  ==> cd contrib/pg_trgm; make install
  ==> cd contrib/pgcrypto; make install
  ==> cd contrib/tsearch2; make install
  ==> cd contrib/vacuumlo; make install
  ==> cd contrib/xml2; make install
  ==> cd contrib/intarray; make install
  ==> cd contrib/pg_upgrade; make install
  ==> cd contrib/pg_upgrade_support; make install
  ==> cd contrib/hstore; make install
  ==> Caveats
  If builds of Postgresl 9 are failing and you have version 8.x installed,
  you may need to remove the previous version first. See:
    https://github.com/mxcl/homebrew/issues/issue/2510
 
  To build plpython against a specific Python, set PYTHON prior to brewing:
    PYTHON=/usr/local/bin/python  brew install postgresql
  See:
    http://www.postgresql.org/docs/9.0/static/install-procedure.html
 
 
  If this is your first install, create a database with:
      initdb /usr/local/var/postgres
 
  If this is your first install, automatically load on login with:
      cp /usr/local/Cellar/postgresql/9.0.1/org.postgresql.postgres.plist ~/Library/LaunchAgents
      launchctl load -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
 
  If this is an upgrade and you already have the org.postgresql.postgres.plist loaded:
      launchctl unload -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
      cp /usr/local/Cellar/postgresql/9.0.1/org.postgresql.postgres.plist ~/Library/LaunchAgents
      launchctl load -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
 
  Or start manually with:
      pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
 
  And stop with:
      pg_ctl -D /usr/local/var/postgres stop -s -m fast
 
  If you want to install the postgres gem, including ARCHFLAGS is recommended:
      env ARCHFLAGS="-arch x86_64" gem install pg
 
  To install gems without sudo, see the Homebrew wiki.
  ==> Summary
  /usr/local/Cellar/postgresql/9.0.1: 1219 files, 20M, built in 3.4 minutes
  sh-3.2# exit
  
Init Database:
  Erics-MacBook:~ eric$ initdb /usr/local/var/postgres
  The files belonging to this database system will be owned by user "eric".
  This user must also own the server process.
 
  The database cluster will be initialized with locale en_US.UTF-8.
  The default database encoding has accordingly been set to UTF8.
  The default text search configuration will be set to "english".
 
  creating directory /usr/local/var/postgres ... ok
  creating subdirectories ... ok
  selecting default max_connections ... 20
  selecting default shared_buffers ... 2400kB
  creating configuration files ... ok
  creating template1 database in /usr/local/var/postgres/base/1 ... ok
  initializing pg_authid ... ok
  initializing dependencies ... ok
  creating system views ... ok
  loading system objects' descriptions ... ok
  creating conversions ... ok
  creating dictionaries ... ok
  setting privileges on built-in objects ... ok
  creating information schema ... ok
  loading PL/pgSQL server-side language ... ok
  vacuuming database template1 ... ok
  copying template1 to template0 ... ok
  copying template1 to postgres ... ok
 
  WARNING: enabling "trust" authentication for local connections
  You can change this by editing pg_hba.conf or using the -A option the
  next time you run initdb.
 
  Success. You can now start the database server using:
 
      postgres -D /usr/local/var/postgres
  or
      pg_ctl -D /usr/local/var/postgres -l logfile start
  
Run Database:
  Erics-MacBook:~ eric$ pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start &
  
Create a Database:
  Erics-MacBook:~ eric$ createdb mydb
  
Open the mydb database and do some test:
  Erics-MacBook:~ eric$ psql mydb
  psql (9.0.1)
  Type "help" for help.
 
  mydb=# create table users(id serial, name varchar(25));
  NOTICE:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
  CREATE TABLE
  mydb=# insert into users(name) values('eric');
  INSERT 0 1
  mydb=# insert into users(name) values('lxneng');
  INSERT 0 1
  mydb=# select * from users;
   id |    name     
  ----+-------------
    1 | eric
    2 | lxneng
  mydb=# \q




Type \q and then press ENTER to quit psql.







mysql: SHOW TABLES
postgresql: \d
postgresql: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

mysql: SHOW DATABASES
postgresql: \l
postgresql: SELECT datname FROM pg_database;

mysql: SHOW COLUMNS
postgresql: \d table
postgresql: SELECT column_name FROM information_schema.columns WHERE table_name ='table';

mysql: DESCRIBE TABLE
postgresql: \d+ table
postgresql: SELECT column_name FROM information_schema.column












